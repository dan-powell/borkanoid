pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

-- borkanoid - an arkanoid/pinball hybrid thing by dannysomething (dan-powell.uk)

-- TODO

-- falling pickups for bonus points
-- start screen
-- lose screen
-- refine gfx
-- refine physics (increase negative velocity limit)
-- music!

-- basic de-buggery
debug = {}
frame = 0

-- core physics values
physics = {}
physics.gravity = 0.2
physics.fx = 0.999
physics.fy = 0.95
physics.vxmax = 6 -- max x velocity
physics.vymax = 16 -- max y velocity

-- tile grid
grid = {}
grid.w = 8
grid.h = 8

-- actor tables
bricks = {}
balls = {}
paddles = {}

-- camera attributes
cam = {
    x = 0,
    y = 0,
    w = 128,
    h = 128,
    b = 0
}
cam.c = flr(cam.h/2)

-- level attributes
levels = {
    {
        next = 2,
        tw = 16, -- width in tiles
        th = 16, -- height in tiles
        w = 128, -- width in pixels
        h = 128, -- height in pixels
        mx = 0, -- map tile x coordinate
        my = 0, -- map tile y coordinate
        b = 4, -- number of bricks (so we know when cleared)
    },
    {
        next = 0,
        tw = 16,
        th = 16,
        w = 128,
        h = 128,
        mx = 16,
        my = 0,
        b = 4,
    },
    {
        next = 4,
        tw = 16,
        th = 24,
        w = 128,
        h = 192,
        mx = 32,
        my = 0,
        b = 16,
    },
    {
        next = 5,
        tw = 16,
        th = 16,
        w = 128,
        h = 128,
        mx = 32,
        my = 0,
    },
}
level = levels[1]

-- ====================================
-- title
-- ====================================

function init_title()
    printh('title')
    -- set the state of the game
    state = 0
    -- 0 start screen
    -- 1 game
    -- 2 score screen
end

local title_x = 0
function update_title()
    if btn(4) then
        init_game()
    end
end

function draw_title()
    cls()
    spr(64, 16, 48, 12, 3) -- title
    spr(16, 52, 64, 4, 1) -- paddle
    if frame%8 == 0 or frame%8 == 1 or frame%8 == 2 then
    else
        print("press üÖæÔ∏è to start", 34, 76)
    end
end

-- ====================================
-- game
-- ====================================

function init_game()
    start()
    state = 1
    status = 0
    reset()
end

-- --------------------------
-- game logic
-- --------------------------

function update_game()

    if status == 0 then
        -- start of level
        if btn(5) then
            launch_ball()
            status = 1
        end
    end

    if status == 2 then
        -- level complete
        if btn(4) then
            next()
        end
    end

    if status == 3 then
        -- level lost
        if btn(4) then
            finish()
        end
    end

    if status < 2 then
        -- level in progress
        update_debounce()
        move_actors()
        update_camera()
        check_win()
        if status == 1 then
            check_lost()
        end
    end


end

-- start the game
function start()
    player = {}
    player.lives = 4
    player.score = 0
end

-- reset balls & paddles
function reset()
    status = 0
    balls = {}
    paddles = {}
    paddle = add_paddle(level.h - 8)
end

function next()
    if level.next == 0 then
        init_scores()
    else
        level = levels[level.next]
    end
    reset()
end

function finish()
    init_scores()
end

-- create a new ball instance
function new_ball()
    local b = {
        w = 5, -- width
        h = 5, -- height
        x = 0, -- absolute x position
        y = 0, -- absolute y position
        vx = 0, -- x velocity (pixels moved per frame)
        vy = 0, -- y velocity (pixels moved per frame)
        g = physics.gravity, -- gravity
        fx = physics.fx, -- friction x
        fy = physics.fy, -- friction y
        s = 5 -- sprite
    }
    return b
end

-- add a ball to the game engine
function add_ball(x, y)
    local b = new_ball()
    b.x = x -- starting x position (absolute)
    b.y = y -- starting y position (absolute)
    b.vx = rnd(2) - 1 -- starting x velocity
    b.vy = rnd(3) * -1 -- starting y velocity
    add(balls, b)
    return b
end

function new_paddle()
    local p = {
        w = 32, -- width
        h = 8, -- height
        ho = 3, -- height offset (for calculating collisions)
        x = 0, -- absolute x position
        y = 0, -- absolute y position
        vx = 0, -- x velocity (pixels moved per frame)
        fx = 0.6, -- friction
        f = 4, -- force applied when moved
        s = 16, -- sprite
        sw = 4, -- sprite width (in tiles)
        sh = 1 -- sprite height (in tiles)
    }
    return p
end

-- add a ball to the game engine
function add_paddle(y)
    local p = new_paddle()
    p.x = flr(level.w/2)
    p.y = y
    add(paddles, p)
    return p
end

function launch_ball()
    local b = new_ball()
    b.x = paddle.x
    b.y = paddle.y - 3
    b.vx = 0.25
    b.vy = -1
    add(balls, b)
end

-- check if level win critera achieved
function check_win()
    if level.b <= 0 then
        status = 2
    end
end

-- check if lost life criteria achieved
function check_lost()
    if count(balls) <= 0 then
        -- todo lose a life
        player.lives -= 1
        reset()
        if player.lives <= 0 then
            status = 3
        end
    end
end

-- update the camera position
function update_camera()

    local ball = active_ball()
    if ball then
        -- in play, focus on balls
        local y = ball.y - (cam.y+cam.h/2) -- y offset of ball from center of cam
        -- center the camera on the ball, but only if it approaches edges of screen
        if y > 30 or y < -30 then
            cam.y += y/8
        end
    else
        -- no balls, focus on paddle
        cam.y = paddle.y
    end

    -- limit the camera to stop it revealing outside of map
    if cam.y < 0 then
        cam.y = 0
    elseif cam.y > level.h - cam.h then
        cam.y = level.h - cam.h
    end

end

-- return the currently active ball (nearest to bottom of level)
function active_ball()
    if count(balls) > 0 then
        local ball = balls[1]
        for i = 1, count(balls) do
            if balls[i].y > ball.y then
                ball = balls[i]
            end
        end
        return ball
    else
        return false
    end
end

-- update all actors
function move_actors()
    foreach(balls, move_ball)
    foreach(paddles, move_paddle)
end

-- update position of bat
function move_paddle(p)

    -- create a force acting on the bat
    local f = 0
    if btn(0) then p.vx -= p.f end
    if btn(1) then p.vx += p.f end

    -- apply friction
    p.vx *= p.fx

    -- set new position of bat
    p.x += p.vx

    -- paddle can't leave level edges
    if p.x < 8 then
        p.x = 8
        p.vx = 0
    end
    if p.x > level.w - 8 - p.w then
        p.x = level.w - 8 - p.w
        p.vx = 0
    end
end

-- update position of ball
function move_ball(b)

    -- test if colliding, and change gravity accordingly
    if ball_collision(b) != 0 then
        b.g = 0
    else
        b.g = physics.gravity
    end

    -- create a fake ball
    local fake = b
    fake.vx = b.vx * b.fx -- add a friction coefficient
    fake.vy = b.vy * b.fy + b.g -- add a friction coefficient + gravity
    fake.x = b.x
    fake.y = b.y

    -- figure out number of pixels ball will move this frame
    local i = abs(fake.vx) + abs(fake.vy)
    fake.ivx = fake.vx/i
    fake.ivy = fake.vy/i

    -- for each pixel, test if fake will collide, and adjust velocity accordingly
    local lose = false
    for x=0,i do
        fake.x += fake.ivx
        fake.y += fake.ivy

        -- does the ball fall of the bottom of the level?
        if fake.y + fake.h > level.h then
            lose = true
        end

        -- check collisions with map
        local cw = ball_collision(fake)
        if cw == 1 then fake.ivy = abs(fake.ivy) end -- top, bounce down
        if cw == 2 then fake.ivx = abs(fake.ivx) * -1 end -- right, bounce left
        if cw == 3 then fake.ivy = abs(fake.ivy) * -1 end -- bottom, bounce up
        if cw == 4 then fake.ivx = abs(fake.ivx) end -- left, bounce right
        if cw > 0 then
            sfx(0)
        end

        -- check collisions with paddles
        local cp = collide_paddle(fake.x + flr(fake.w/2), fake.y + fake.h -1)
        if cp > 0 then
            paddles[cp].s = 28
            sfx(1)
            b.ivy = (abs(b.ivy) * -1) - 1 - abs(paddles[cp].vx/10)
            b.ivx += paddles[cp].vx/10
        end -- bottom, bounce up
    end

    if lose then
        -- remove the ball
        del(balls, b)
        sfx(3)
    else
        -- bring it all together and update the actual position
        b.vx = limit_v(fake.ivx * i, physics.vxmax) --limit_velocity(fake.ivx * i)
        b.vy = limit_v(fake.ivy * i, physics.vymax)
        b.x = fake.x
        b.y = fake.y
    end

end

-- limit velocity to +/- l
function limit_v(x, l)
    if x > 0 then
        return min(x, l)
    elseif x < 0 then
        return max(x, l * -1)
    else
        return 0
    end
end

-- check if any side of ball collides with a wall. returns integer depending on side of collision
function ball_collision(b)
    if collide(b.x + flr(b.w/2), b.y) then return 1 end -- 1 top
    if collide(b.x + b.w -1, b.y + flr(b.h/2)) then return 2 end -- 2 right
    if collide(b.x + flr(b.w/2), b.y + b.h -1) then return 3 end -- 3 bottom
    if collide(b.x, b.y + flr(b.h/2)) then return 4 end -- 4 left
    return 0 -- 0 nuffin
end

-- test if position contains a bat. returns the bat number if collisioned
function collide_paddle(x, y)
    for i=1,count(paddles) do
        if x > paddles[i].x and x < paddles[i].x + paddles[i].w and y > paddles[i].y + paddles[i].ho and y < paddles[i].y + paddles[i].h then
            return i
        end
    end
    return 0
end

-- Debounce - used in relation tiles
debounce = {}
function set_debounce(x,y,v)
    x += (level.mx * 8)
    y += (level.my * 8)
    local i = flr(x/grid.w) + level.tw * flr(y/grid.h)
    debounce[i] = v
end

function has_debounce(x,y)
    x += (level.mx * 8)
    y += (level.my * 8)
    local i = flr(x/grid.w) + level.tw * flr(y/grid.h)
    local d = debounce[i]
    if d == nil then
        return false
    end
    if d <= 0 then
        return false
    end
    return true
end

-- Decrement all debounce values (each frame)
function update_debounce(x,y)
    for k, v in pairs(debounce) do
        debounce[k] -= 1
    end
end

-- collide with a collidable tile
function collide(x, y)
    t=tget(x, y)
    -- Test if tile is physical
    if fget(t, 0) then
        -- Test if tile is a brick
        if fget(t, 1) then

            -- Check if tile has a debounce value
            if has_debounce(x,y) == false then
                if fget(t, 5) then
                    -- 4th brick
                    tset(x, y, t-1)
                    player.score += 25
                    sfx(2)
                elseif fget(t, 4) then
                    -- 3rd brick
                    tset(x, y, t-1)
                    player.score += 50
                    sfx(2)
                elseif fget(t, 3) then
                    -- 2nd brick
                    tset(x, y, t-1)
                    player.score += 75
                    sfx(2)
                elseif fget(t, 2) then
                    -- Lightest brick
                    tset(x, y, 0)
                    player.score += 100
                    level.b -= 1
                    sfx(2)
                end
                set_debounce(x,y,60) -- Set a debounce on tile
            end
        end
        return true
    else
        return false
    end
end

-- return the tile at a given pixel position
function tget(x, y)
    x += (level.mx * 8)
    y += (level.my * 8)
    return mget(flr(x/grid.w), flr(y/grid.h))
end

-- set the tile at a given pixel position
function tset(x, y, v)
    x += (level.mx * 8)
    y += (level.my * 8)
    return mset(flr(x/grid.w), flr(y/grid.h), v)
end

-- --------------------------
-- game drawing
-- --------------------------

function draw_game()
    cls(0)
    map(level.mx,level.my,0,0,level.tw,level.th)
    draw_actors()
    -- print(stat(0), 9, cam.y + cam.h - 16, 7) -- debug memory
    -- print(stat(1), 9, cam.y + cam.h - 8, 7) -- debug cpu
    camera(0, cam.y)
    draw_ui()
    if status == 0 then
        print('press ‚ùé to launch', cam.x + flr(cam.w/2) - 30, cam.y + flr(cam.h/2) + 30, 1)
    end
    if status == 2 then
        print('level complete', cam.x + flr(cam.w/2) - 26, cam.y + flr(cam.h/2) + 30, 1)
        print('press üÖæÔ∏è for next level', cam.x + flr(cam.w/2) - 36, cam.y + flr(cam.h/2) + 40, 1)
    end
    if status == 3 then
        print('lost', cam.x + flr(cam.w/2) - 26, cam.y + flr(cam.h/2) + 30, 1)
        print('press üÖæÔ∏è for scores', cam.x + flr(cam.w/2) - 36, cam.y + flr(cam.h/2) + 40, 1)
    end
    if status == 4 then
        print('complete!', cam.x + flr(cam.w/2) - 26, cam.y + flr(cam.h/2) + 30, 1)
        print('press üÖæÔ∏è for scores', cam.x + flr(cam.w/2) - 36, cam.y + flr(cam.h/2) + 40, 1)
    end
end

function draw_actors()
    foreach(balls, draw_ball)
    foreach(paddles, draw_paddle)
end

function draw_ball(b)
    spr(b.s, b.x, b.y)
end

function draw_ui()
    -- draw lives
    for i = 1, player.lives do
        spr(6, cam.x + cam.w - 9 - (i*8), cam.y + 9)
    end
    -- draw score
    print(player.score, cam.x + 9, cam.y + 9, 9)
end

function draw_paddle(p)

    -- draw a marker for the bat if off the bottom of the cam
    if p.y > cam.y + cam.h then
        spr(1, p.x, cam.y + cam.h - 12, p.sw, p.sh)
    end

    -- add a ball to doggo if start of level
    if status == 0 then
        spr(5, paddle.x - 3, paddle.y + 3)
    end

    -- loop walking animation
    if p.vx > 1 or p.vx < -1 then
        -- 1, 5, 9
        if frame%2 == 0 then
            p.s += p.sw
            if p.s > 27 then
                p.s = 16
            end
        end
    end
    spr(p.s, p.x, p.y, p.sw, p.sh)
end

-- ====================================
-- lose
-- ====================================

function init_scores()
    state = 2
end

function update_scores()
    if btn(5) then
        run()
    end
end

function draw_scores()
    cls()
    print("your score", 48, 76)
    print("press start to try again", 18, 84)
end

-- ====================================
-- state management
-- ====================================

function _init()
    init_title() -- does title things.
end

function _update()
    frame += 1
    if (state == 0) then --title screen state
        update_title()
    elseif (state == 1) then
        update_game()
    else
        update_scores()
    end
end

function _draw()
    if (state == 0) then
        draw_title()
    elseif (state == 1) then
        draw_game()
    else
        draw_scores()
    end
end
__gfx__
000000007000000000000000000000000000000700e000000ee0ee00000005700770000007700000000000000000000000000000000000000000000000000000
0000000077777777777777777777777777777777088e0000888888e0000005676670000066700000000000000000000000000000000000000000000000000000
00000000700000000000000000000000000000072888e000288888e0000066675567000055670000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000282000002888800000666000066700000667000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000020000000282000006660000006660000066600000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000020000766600000000666700006667000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000666000000000066700000667000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000055000000000055000000550000000000000000000000000000000000000000000000000
00900900000000000000000000000000009009000000000000000000000000000090090000000000000000000000000000900900000000000000000000000000
04444400000000000000000000000000044444000000000000000000000000090444440000000000000000000000000004444400000000000000000000000000
9c4c44000000000000000000000000099c4c44000000000000000000000000049c4c44000000000000000000000000909c4c4400000000000000000000000009
4444442444dddd4444444444444444044444442444dddd4444444444444444044444442444dddd44444444444444440400004424440000000000000000444404
0444424444ddd4444444dd44444444440444424444ddd4444444dd44444444400444424444ddd4444444dd44444444440444424444dddd000000004444444444
0002244444444444444dddd4444444000002244444444444444dddd4444444000002244444444444444dddd44444440000022444444ddd444444444444444400
00604040000000000000000000040400000690400000000000000000000409000060409000000000000000000009040000604040044444444444dd4444040400
0000909000000000000000000009090000000090000000000000000000090000000090000000000000000000000009000000909000000044444dddd400090900
45556767676755544444444467676767676767676767676767675554455567674555676767675554444444444444444444444444444444444444444445576554
45557676767655545555555576767676767676767676767676767555555676764555767676765554455555555555555445555555555555544555555445567554
45556767676755545555555567676767676767676767676767676755556767674555576767655554455555555555555445555555555555544555555445576554
45557676767655545555555576767676767676767676767676767675567676764555557676555554455555555555555445567676767675544556755445567554
45556767676755546767676755555555676767655767676767676767676767674555555555555554455555676755555445576767676765544557655445576554
45557676767655547676767655555555767676555576767676767676767676764555555555555554455556767675555445555555555555544556755445555554
45556767676755546767676755555555676765555557676767676767676767674555555555555554455567676767555445555555555555544557655445555554
45557676767655547676767644444444767655544555767676767676767676764444444444444444455576767676555444444444444444444556755444444444
0bbbbbb00aaaaaa009999990066666600cccccc0011111100ffffff00eeeeee00888888002222220000000000000000000000000000000000000000000000000
bbbb66bbaaaa77aa9999aa9966667766cccc66cc1111cc11ffff77ffeeee77ee8888ee882222ee22000000000000000000000000000000000000000000000000
bbbbb66baaaaa77a99999aa966666776ccccc66c11111cc1fffff77feeeee77e88888ee822222ee2000000000000000000000000000000000000000000000000
bbbbbb6baaaaaa7a999999a966666676cccccc6c111111c1ffffff7feeeeee7e888888e8222222e2000000000000000000000000000000000000000000000000
b3bbbbbba9aaaaaa9499999965666666c1cccccc15111111f5ffffffe2eeeeee8288888821222222000000000000000000000000000000000000000000000000
b33bbbbba99aaaaa9449999965566666c11ccccc15511111f55fffffe22eeeee8228888821122222000000000000000000000000000000000000000000000000
bb33bbbbaa99aaaa9944999966556666cc11cccc11551111ff55ffffee22eeee8822888822112222000000000000000000000000000000000000000000000000
0bbbbbb00aaaaaa009999990066666600cccccc0011111100ffffff00eeeeee00888888002222220000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000aaaaa000000aaaaa0000aaaaa00000aa0000aa0000000aaa0000000aaaa00000aa0000aaaaa0000aa00aaaa0000000000000000000000000000000000000
000099999a000009999a000099999aa0009a00099a0000009999a000000999a000009a00009999a00009a009999a000000000000000000000000000000000000
0000990099a000999099a0009900999a009a0099900000009909a0000009999a00009a000999099a0009a0099099a00000000000000000000000000000000000
00009a0009a000990009a0009a00009a009a00990000000999099a000009909a00009a000990009a0009a009a0099a0000000000000000000000000000000000
00009a0099a0099900099a009a00009a009a09990000000990009a000009a099a0009a0099900099a009a009a0009a0000000000000000000000000000000000
00009a099900099000009a009a00009a0099999000000099900099a00009a009a0009a0099000009a009a009a0009a0000000000000000000000000000000000
000099a99000099000009a009a009999009999a000000099000009a00009a0099a009a0099000009a009a009a0009a0000000000000000000000000000000000
000099999a0009a000009a0099aa9990009999a0000009990000099a0009a0009a009a009a000009a009a009a0009a0000000000000000000000000000000000
0000990099a0099a00099a00999990000099099a00000990aaaaa09a0009a00099a09a0099a00099a009a009a0009a0000000000000000000000000000000000
00009a0009a0009a0009900099099a00009a009a0000999099999099a009a00009a09a0009a000990009a009a0099a0000000000000000000000000000000000
00009a0099a00099a09990009a0099a0009a0099a000990000000009a009a000099a9a00099a09990009a009a099900000000000000000000000000000000000
000099aa990000099a9900009a00099a009a00099a00990000000009a009a00000999a000099a9900009a0099a99000000000000000000000000000000000000
0000999990000009999900009a00009a009a000099009900000000099009a00000999a0000999990000990099990000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000066000000000000066600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000005000006666666660666600666666000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000500000000000000000000066666666000000066660000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000050000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000006660006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000500000000006600066666666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000005000006666666000000666600000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000066600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
00000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010107070b070b13070b132301010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
2423232323232323232323232323232524232323232323232323232323232325232323232323232323232323232323230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100620000600000006100006000002021000000000000000000000000000020230000000000000000000000000000230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
210000000000000000000063646500202100002a22222222222222222b000020230000000000000000000000000000230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100006364650000620000000000002021000020242323232323232521000020230000000024000000002400000000230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100000000000000000000600060002021000028290000000000002829000020230000002400000000000024000000230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100616100600063646500000000002021000000000000000000000000000020230000240000000000000000240000230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
210000000000000000000000620000202100002e0000000000000000002e0020230000000000002020000000000000230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
210000636465006200000000000000202100002f0030300000303000002f0020240000000000002020000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100000000000000000062000000002021000000002a2b00002a2b0000000020240000240000000000000000240000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100000000303200613539000062002021000000002829000028290000000020240000002400000000000024000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100620060000000000000006200002021000000000000000000000000000020240000000024000000002400000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100000000600061000061000000002021000000000000000000000000000020240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100000000000000000000000000002021000000000000000000000000000020240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100000000000000000000000000002021000000000000000000000000000020240000212100002323000021210000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100000000000000000000000000002021000000000000000000000000000020240000212100002323000021210000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100000000000000000000000000002021000000000000000000000000000020240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100003702037000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000c1200e32012500295002950029500295002a5002b5002b500000002c5000c50009500095000a5000a5000e500135000f500135002f500315002c50025500195000e5000000000000000000000000000
00100000337502b7503075035700317002e7002c7002d7003620031100352002b10033200322001f100307003070030700307003070030700000000000000000000000e000000000000000000000000000000000
0010000018450184501845000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d6001760019600226001b60000000000000000000000
